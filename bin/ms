#! /bin/bash

# --------------------- Quick Commands ---------------------
# 🚀 启动服务:
#    bash model.sh start qwen_server -m "Qwen3-14B" -p 6544 -g 1
# 📊 查看状态:
#    bash model.sh status
# 🛑 停止服务:
#    bash model.sh stop qwen_server
# 📜 查看日志:
#    bash model.sh logs qwen_server
# 🗑️ 删除日志:
#    bash model.sh delete qwen_server
# ----------------------------------------------------------


PROJECT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd )"
cd ${PROJECT_DIR}

# --- Conda 环境自动识别 ---
# 自动查找 Conda 的 activate 脚本
CONDA_ACTIVATE_SCRIPT=""
if command -v conda &> /dev/null; then
    # 如果 conda 命令在 PATH 中，这是最理想的情况
    CONDA_BASE_DIR=$(conda info --base)
    CONDA_ACTIVATE_SCRIPT="${CONDA_BASE_DIR}/bin/activate"
elif [ -d "${HOME}/miniconda3" ]; then
    # 查找常见的 miniconda3 路径
    CONDA_ACTIVATE_SCRIPT="${HOME}/miniconda3/bin/activate"
elif [ -d "${HOME}/anaconda3" ]; then
    # 查找常见的 anaconda3 路径
    CONDA_ACTIVATE_SCRIPT="${HOME}/anaconda3/bin/activate"
fi

# 主Python脚本
SCRIPT_NAME="modelServer.py"
# 用于存放所有实例相关文件（配置, pid, 日志）的目录
INSTANCE_DIR="logs"

# --- 默认参数 ---
DEFAULT_MODEL_NAME="Qwen2.5-VL-7B"
DEFAULT_PORT=9960
DEFAULT_GPU_ID="0"
# 启动超时时间（秒），可以根据模型大小适当调整
START_TIMEOUT=1800 # 30分钟

# --- 颜色定义 ---
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 确保实例目录存在
mkdir -p "$INSTANCE_DIR"

# --- 帮助信息 ---
usage() {
    echo -e "${YELLOW}智能多实例服务管理脚本${NC}"
    echo ""
    echo -e "${BLUE}用法: $0 <命令> [实例名] [选项]...${NC}"
    echo ""
    echo -e "${YELLOW}命令:${NC}"
    echo "  start   <实例名>    启动一个新的服务实例 (将交互式选择Conda环境)"
    echo "  stop    <实例名>    停止一个指定的服务实例"
    echo "  restart <实例名>    重启一个指定的服务实例（使用原配置）"
    echo "  status  [实例名]    查看指定实例或所有实例的状态"
    echo "  logs    <实例名>    实时查看指定实例的日志"
    echo "  delete  <实例名>    停止并彻底删除一个实例的配置和日志"
    echo ""
    echo -e "${YELLOW}启动选项 (仅用于 'start' 命令):${NC}"
    echo "  -m, --model <模型名>    指定要加载的模型 (默认: ${DEFAULT_MODEL_NAME})"
    echo "  -p, --port  <端口号>    指定服务监听的端口 (默认: ${DEFAULT_PORT})"
    echo "  -g, --gpu   <GPU_ID>    指定使用的GPU ID (默认: ${DEFAULT_GPU_ID})"
    # 移除了 -e 选项，因为 start 将会交互式选择
    echo ""
    echo -e "${YELLOW}示例:${NC}"
    echo "  # 启动一个名为 'api_server_1' 的实例，使用GPU 1，端口8001"
    echo "  $0 start api_server_1 -m Qwen3-14B -g 1 -p 8001"
    echo ""
    echo "  # 查看所有实例的状态"
    echo "  $0 status"
    echo ""
    echo "  # 停止 'api_server_1' 实例"
    echo "  $0 stop api_server_1"
    exit 1
}

# --- 内部函数 ---

# 检查实例是否正在运行
is_running() {
    local instance_name=$1
    local pid_file="${INSTANCE_DIR}/${instance_name}/${instance_name}.pid"
    if [ -f "$pid_file" ]; then
        local pid=$(cat "$pid_file")
        if [ -n "$pid" ] && ps -p "$pid" > /dev/null; then
            return 0 # 正在运行
        fi
    fi
    return 1 # 未运行
}

# 激活 Conda 环境的辅助函数
activate_env() {
    local env_name=$1
    if [ -z "$CONDA_ACTIVATE_SCRIPT" ]; then
        echo -e "${RED}错误: 无法找到 Conda 的 activate 脚本。请确保 Conda 已正确安装并初始化。${NC}"
        exit 1
    fi
    echo "source ${CONDA_ACTIVATE_SCRIPT} ${env_name}"
}


# 启动服务
# 【重要改动】: 增加了一个隐藏的 -e 参数，专门给 restart 命令使用
do_start() {
    local instance_name=$1
    shift
    
    # 解析选项参数
    local model_name=$DEFAULT_MODEL_NAME
    local port=$DEFAULT_PORT
    local gpu_id=$DEFAULT_GPU_ID
    local conda_env_name="" # 默认conda环境为空

    while [[ "$#" -gt 0 ]]; do
        case $1 in
            -m|--model) model_name="$2"; shift ;;
            -p|--port) port="$2"; shift ;;
            -g|--gpu) gpu_id="$2"; shift ;;
            -e|--env) conda_env_name="$2"; shift ;; # 隐藏参数，供restart调用
            *) echo -e "${RED}错误: 'start' 命令遇到未知选项: $1${NC}"; usage ;;
        esac
        shift
    done

    local instance_path="${INSTANCE_DIR}/${instance_name}"
    local conf_file="${instance_path}/${instance_name}.conf"
    local pid_file="${instance_path}/${instance_name}.pid"
    local log_file="${instance_path}/${instance_name}.log"

    if is_running "$instance_name"; then
        local pid=$(cat "$pid_file")
        echo -e "${YELLOW}实例 '${instance_name}' 已在运行中, PID: ${pid}${NC}"
        exit 0
    fi

    # 【核心交互逻辑】
    # 如果 conda_env_name 为空 (即用户直接调用 start)，则进入交互模式
    if [ -z "$conda_env_name" ]; then
        echo -e "${YELLOW}正在检测可用的 Conda 环境...${NC}"
        
        # 获取conda环境列表并存入数组
        # 使用 process substitution 和 mapfile 来安全处理带空格的路径
        mapfile -t conda_envs < <(conda env list | grep -v '^#' | awk '{print $1}' | sed '/^$/d')

        if [ ${#conda_envs[@]} -eq 0 ]; then
            echo -e "${RED}错误: 未找到任何 Conda 环境。请先创建 Conda 环境。${NC}"
            exit 1
        fi

        echo -e "${BLUE}发现以下 Conda 环境:${NC}"
        for i in "${!conda_envs[@]}"; do
            printf "  %2d) %s\n" "$((i+1))" "${conda_envs[$i]}"
        done

        local choice
        while true; do
            read -p "请选择要使用的环境序号 [1-${#conda_envs[@]}]: " choice
            if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#conda_envs[@]}" ]; then
                conda_env_name=${conda_envs[$((choice-1))]}
                echo -e "已选择环境: ${GREEN}${conda_env_name}${NC}"
                break
            else
                echo -e "${RED}输入无效，请输入 1 到 ${#conda_envs[@]} 之间的数字。${NC}"
            fi
        done
    fi


    # 创建实例特定目录并清空旧日志
    mkdir -p "$instance_path"
    > "$log_file"

    # 保存配置 (包括选择的 CONDA_ENV_NAME)
    echo "MODEL_NAME=\"${model_name}\"" > "$conf_file"
    echo "PORT=${port}" >> "$conf_file"
    echo "GPU_ID=${gpu_id}" >> "$conf_file"
    echo "CONDA_ENV_NAME=${conda_env_name}" >> "$conf_file"

    echo -e "正在启动实例 '${BLUE}${instance_name}${NC}'..."
    echo -e "  - Conda 环境: ${conda_env_name}"
    echo -e "  - 模型: ${model_name}"
    echo -e "  - 端口: ${port}"
    echo -e "  - GPU ID: ${gpu_id}"
    echo -e "  - 日志文件: ${log_file}"

    # 获取激活命令
    local activate_cmd
    activate_cmd=$(activate_env "$conda_env_name")
    if [ $? -ne 0 ]; then exit 1; fi

    # 构建在后台执行的完整命令
    local full_command="export CUDA_VISIBLE_DEVICES=${gpu_id}; ${activate_cmd} && python -u \"$SCRIPT_NAME\" --model \"${model_name}\" --port ${port}"
    
    # 后台启动Python脚本
    nohup bash -c "${full_command}" > "$log_file" 2>&1 &
    local pid=$!
    echo "$pid" > "$pid_file"

    # --- 等待并验证服务是否成功启动 (逻辑不变) ---
    echo -n "等待服务初始化 (最长 ${START_TIMEOUT} 秒) "
    local count=0
    local success=false
    while [ "$count" -lt "$START_TIMEOUT" ]; do
        if ! is_running "$instance_name"; then
            if grep -q "Could not find conda environment" "$log_file"; then
                 echo -e "\n${RED}错误: Conda 环境 '${conda_env_name}' 不存在或无法激活!${NC}"
            else
                 echo -e "\n${RED}错误: 进程在初始化期间意外退出!${NC}"
            fi
            break
        fi

        if grep -q "Test Successfully!" "$log_file"; then
            success=true
            echo -e "\n${GREEN}服务已成功初始化!${NC}"
            break
        fi
        
        echo -n "."
        sleep 5
        ((count+=5))
    done

    # --- 根据验证结果进行最终处理 (逻辑不变) ---
    if [ "$success" = true ]; then
        echo -e "${GREEN}实例 '${instance_name}' 启动成功! PID: ${pid}${NC}"
    else
        if [ "$count" -ge "$START_TIMEOUT" ]; then
            echo -e "\n${RED}错误: 等待服务初始化超时 (${START_TIMEOUT}秒)!${NC}"
        fi
        echo -e "${RED}实例 '${instance_name}' 启动失败!${NC}"
        echo -e "请检查日志获取详细信息: ${BLUE}tail -n 50 ${log_file}${NC}"
        
        echo -e "正在清理失败的进程 (PID: ${pid})..."
        kill -9 "$pid" > /dev/null 2>&1
        rm -f "$pid_file"
        exit 1
    fi
}

# 停止服务 (逻辑不变)
do_stop() {
    local instance_name=$1
    local pid_file="${INSTANCE_DIR}/${instance_name}/${instance_name}.pid"

    if ! is_running "$instance_name"; then
        echo -e "${YELLOW}实例 '${instance_name}' 未在运行中。${NC}"
        [ -f "$pid_file" ] && rm -f "$pid_file"
        return 0
    fi

    local pid=$(cat "$pid_file")
    echo -e "正在停止实例 '${instance_name}' (PID: ${pid})..."
    pkill -P "$pid"
    kill "$pid"

    local count=0
    while is_running "$instance_name"; do
        if [ "$count" -lt 10 ]; then
            sleep 1; ((count++)); echo -n "."
        else
            echo -e "\n${YELLOW}进程未能正常停止, 强制终止 (kill -9)...${NC}"
            pkill -9 -P "$pid"
            kill -9 "$pid"
            sleep 1
            break
        fi
    done
    echo -e "\n${GREEN}实例 '${instance_name}' 已停止。${NC}"
    rm -f "$pid_file"
}

# 查看状态 (逻辑不变, 之前已支持显示Conda环境)
do_status() {
    local instance_name=$1
    if [ -z "$instance_name" ]; then
        echo -e "${BLUE}--- 所有托管的服务实例状态 ---${NC}"
        if [ -z "$(ls -A $INSTANCE_DIR)" ]; then
            echo "当前没有托管任何实例。"
            return
        fi
        printf "%-20s %-10s %-10s %-20s %-25s %-10s %-10s\n" "实例名" "状态" "PID" "Conda环境" "模型" "端口" "GPU"
        echo "------------------------------------------------------------------------------------------------------------------------"
        for d in ${INSTANCE_DIR}/*; do
            if [ -d "$d" ]; then
                local name=$(basename "$d")
                local conf_file="${d}/${name}.conf"
                if [ -f "$conf_file" ]; then
                    local MODEL_NAME PORT GPU_ID CONDA_ENV_NAME
                    source "$conf_file" # 加载配置
                    if is_running "$name"; then
                        local pid=$(cat "${d}/${name}.pid")
                        printf "${YELLOW}%-20s ${GREEN}%-10s${NC} %-10s ${BLUE}%-20s${NC} ${YELLOW}%-25s${NC} %-10s %-10s\n" "$name" "运行中" "$pid" "$CONDA_ENV_NAME" "$MODEL_NAME" "$PORT" "$GPU_ID"
                    else
                        printf "${YELLOW}%-20s ${RED}%-10s${NC} %-10s ${BLUE}%-20s${NC} ${YELLOW}%-25s${NC} %-10s %-10s\n" "$name" "已停止" "N/A" "$CONDA_ENV_NAME" "$MODEL_NAME" "$PORT" "$GPU_ID"
                    fi
                fi
            fi
        done
    else
        local conf_file="${INSTANCE_DIR}/${instance_name}/${instance_name}.conf"
        if [ ! -f "$conf_file" ]; then
            echo -e "${RED}错误: 未找到实例 '${instance_name}' 的配置。${NC}"
            exit 1
        fi
        local MODEL_NAME PORT GPU_ID CONDA_ENV_NAME
        source "$conf_file" # 加载配置
        echo -e "${BLUE}--- 实例 '${instance_name}' 状态 ---${NC}"
        if is_running "$instance_name"; then
            local pid=$(cat "${INSTANCE_DIR}/${instance_name}/${instance_name}.pid")
            echo -e "状态: ${GREEN}运行中${NC}"
            echo -e "PID: ${pid}"
        else
            echo -e "状态: ${RED}已停止${NC}"
        fi
        echo "Conda环境: ${CONDA_ENV_NAME}"
        echo "模型: ${MODEL_NAME}"
        echo "端口: ${PORT}"
        echo "GPU:  ${GPU_ID}"
    fi
}

# 删除实例 (逻辑不变)
do_delete() {
    local instance_name=$1
    local instance_path="${INSTANCE_DIR}/${instance_name}"

    if [ ! -d "$instance_path" ]; then
        echo -e "${YELLOW}实例 '${instance_name}' 不存在。${NC}"
        return
    fi
    
    if is_running "$instance_name"; then
        echo -e "${YELLOW}实例 '${instance_name}' 正在运行，将先停止它...${NC}"
        do_stop "$instance_name"
    fi

    read -p "确定要永久删除实例 '${instance_name}' 的所有数据吗？(包括配置和日志) [y/N]: " confirm
    if [[ "$confirm" =~ ^[yY]([eE][sS])?$ ]]; then
        rm -rf "$instance_path"
        echo -e "${GREEN}实例 '${instance_name}' 已被成功删除。${NC}"
    else
        echo "操作已取消。"
    fi
}


# --- 主逻辑 ---
COMMAND=$1
INSTANCE_NAME=$2

# ... (主逻辑部分不变) ...
if [[ -z "$COMMAND" || "$COMMAND" == "-h" || "$COMMAND" == "--help" ]]; then
    usage
fi

case "$COMMAND" in
    start|stop|restart|logs|delete)
        if [ -z "$INSTANCE_NAME" ]; then
            echo -e "${RED}错误: 命令 '${COMMAND}' 需要一个 [实例名]。${NC}"
            usage
        fi
        ;;
    status)
        ;;
    *)
        echo -e "${RED}错误: 未知命令 '${COMMAND}'${NC}"
        usage
        ;;
esac

# 执行命令
case "$COMMAND" in
    start)
        shift 2
        do_start "$INSTANCE_NAME" "$@"
        ;;
    stop)
        do_stop "$INSTANCE_NAME"
        ;;
    restart)
        echo "正在重启实例 '${INSTANCE_NAME}'..."
        conf_file="${INSTANCE_DIR}/${INSTANCE_NAME}/${INSTANCE_NAME}.conf"
        if [ ! -f "$conf_file" ]; then
            echo -e "${RED}错误: 找不到实例 '${INSTANCE_NAME}' 的配置, 无法重启。请先使用 'start' 命令创建。${NC}"
            exit 1
        fi
        do_stop "$INSTANCE_NAME"
        sleep 1
        
        # 【重要改动】: restart 从配置文件加载所有参数，包括 CONDA_ENV_NAME
        # 并通过隐藏的 -e 参数传递给 do_start，以跳过交互选择
        local MODEL_NAME PORT GPU_ID CONDA_ENV_NAME
        source "$conf_file"
        do_start "$INSTANCE_NAME" -m "$MODEL_NAME" -p "$PORT" -g "$GPU_ID" -e "$CONDA_ENV_NAME"
        ;;
    status)
        do_status "$INSTANCE_NAME"
        ;;
    logs)
        log_file="${INSTANCE_DIR}/${INSTANCE_NAME}/${INSTANCE_NAME}.log"
        if [ ! -f "$log_file" ]; then
            echo -e "${RED}错误: 未找到实例 '${instance_NAME}' 的日志文件。${NC}"
            exit 1
        fi
        echo "按 CTRL+C 停止查看日志。"
        tail -f "$log_file"
        ;;
    delete)
        do_delete "$INSTANCE_NAME"
        ;;
esac